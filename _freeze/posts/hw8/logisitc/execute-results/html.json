{
  "hash": "6fa3f0ce78e1a808938053c2f1db5fab",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Homework8\"\nauthor: \"hg.park\"\ndate: \"2024-09-10\"\ncategories: [Homework]\njupyter: python3\n---\n\n\n# Logistic Regression\n\n## Data Exploration\n\n종속변수 :  \n- 백혈병 세포 관측 불가 여부 (REMISS), 1이면 관측 안됨을 의미\n\n독립변수 :  \n- 골수의 세포성 (CELL)  \n- 골수편의 백혈구 비율 (SMEAR)  \n- 골수의 백혈병 세포 침투 비율 (INFIL)  \n- 골수 백혈병 세포의 라벨링 인덱스 (LI)  \n- 말초혈액의 백혈병 세포 수 (BLAST)  \n- 치료 시작 전 최고 체온 (TEMP)  \n\n## 문제 1. 데이터를 로드하고, 로지스틱 회귀모델을 적합하고, 회귀 표를 작성하세요.\n\n::: {#827c8b50 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\n\ndf = pd.read_table('C:/Users/USER/Documents/LS빅데이터스쿨/lsbigdata-project1/data/leukemia_remission.txt', delimiter='\\t')\ndf\n\nmodel = sm.formula.logit(\"REMISS ~ CELL + SMEAR + INFIL + LI + BLAST + TEMP\", data=df).fit()\nprint(model.summary())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOptimization terminated successfully.\n         Current function value: 0.399886\n         Iterations 10\n                           Logit Regression Results                           \n==============================================================================\nDep. Variable:                 REMISS   No. Observations:                   27\nModel:                          Logit   Df Residuals:                       20\nMethod:                           MLE   Df Model:                            6\nDate:                Tue, 10 Sep 2024   Pseudo R-squ.:                  0.3718\nTime:                        10:52:43   Log-Likelihood:                -10.797\nconverged:                       True   LL-Null:                       -17.186\nCovariance Type:            nonrobust   LLR p-value:                   0.04670\n==============================================================================\n                 coef    std err          z      P>|z|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     64.2581     74.965      0.857      0.391     -82.670     211.187\nCELL          30.8301     52.135      0.591      0.554     -71.353     133.013\nSMEAR         24.6863     61.526      0.401      0.688     -95.903     145.275\nINFIL        -24.9745     65.281     -0.383      0.702    -152.923     102.974\nLI             4.3605      2.658      1.641      0.101      -0.849       9.570\nBLAST         -0.0115      2.266     -0.005      0.996      -4.453       4.430\nTEMP        -100.1734     77.753     -1.288      0.198    -252.567      52.220\n==============================================================================\n\nPossibly complete quasi-separation: A fraction 0.11 of observations can be\nperfectly predicted. This might indicate that there is complete\nquasi-separation. In this case some parameters will not be identified.\n```\n:::\n:::\n\n\n##  문제 2. 해당 모델은 통계적으로 유의한가요? 그 이유를 검정통계량를 사용해서 설명하시오.\n\n::: {#334fdb2f .cell execution_count=2}\n``` {.python .cell-code}\n# 검정통계량 stat_value = -2(l(beta_hat)(0) - l(beta_hat))\n# 검정통계량 stat_value = -2((LL-Null) - (Log-Likelihood))\nstat_value = 2 * ((-17.186)-(-10.797))\nstat_value\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n-12.777999999999999\n```\n:::\n:::\n\n\n- LLR p-value: 0.04670\n- 유의수준 5%일때 p-value이 0.04670으로 유의수준 보다 작기에 이 모델은 유의하다.\n\n\n## 문제 3. 유의수준이 0.2를 기준으로 통계적으로 유의한 변수는 몇개이며, 어느 변수 인가요?\n- 유의수준 0.2를 기준으로 통계적으로 유의한 변수는 2개, 유의한 변수는 LI(0.101), TEMP(0.198)이다.\n\n## 문제 4. 다음 환자에 대한 오즈는 얼마인가요?\n\n- CELL (골수의 세포성): 65%\n- SMEAR (골수편의 백혈구 비율): 45%\n- INFIL (골수의 백혈병 세포 침투 비율): 55%\n- LI (골수 백혈병 세포의 라벨링 인덱스): 1.2\n- BLAST (말초혈액의 백혈병 세포 수): 1.1세포/μL\n- TEMP (치료 시작 전 최고 체온): 0.9\n\n::: {#e319f348 .cell execution_count=3}\n``` {.python .cell-code}\n# odds = exp(64.2581 + 30.8301 * x1 + 24.6863 * x2 + (-24.9745) * x3 + 4.3605 * x4 + (-0.0115) * x5 + (-100.1734) * x6)\nmy_odds=np.exp(64.2581 + 30.8301 * 0.65 + 24.6863 * 0.45 + (-24.9745) * 0.55 + 4.3605 * 1.2 + (-0.0115) * 1.1 + (-100.1734) * 0.9)\nmy_odds\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\nnp.float64(0.03817459641135519)\n```\n:::\n:::\n\n\n## 문제 5. 위 환자의 혈액에서 백혈병 세포가 관측되지 않은 확률은 얼마인가요?\n\n::: {#5efed564 .cell execution_count=4}\n``` {.python .cell-code}\nmy_odds / (my_odds+1) # 백혈병 세포가 관측되지 않을 확률 : 0.03677\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\nnp.float64(0.03677088280074742)\n```\n:::\n:::\n\n\n## 문제 6. TEMP 변수의 계수는 얼마이며, 해당 계수를 사용해서 TEMP 변수가 백혈병 치료에 대한 영향을 설명하시오.\n\n- TEMP 변수의 계수 : -100.1734\n- Temp가 1도 증가할 때 마다 로그 오즈가 100.1734만큼 감소한다.\n\n::: {#12441478 .cell execution_count=5}\n``` {.python .cell-code}\nnp.exp(-100.1734) # 0에 가까운 수치\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```\nnp.float64(3.1278444454718357e-44)\n```\n:::\n:::\n\n\n- 온도가 1단위 증가해도 백혈병 비관측에 대한 오즈가 증가하지 않는다.\n\n## 문제 7. CELL 변수의 99% 오즈비에 대한 신뢰구간을 구하시오.\n\n::: {#dd4cebbf .cell execution_count=6}\n``` {.python .cell-code}\nfrom scipy.stats import norm\nimport numpy as np\n\n# 오즈비의 신뢰구간 계산\nz = norm.ppf(0.995)  # 99% 신뢰구간에 해당하는 z값 (정규분포의 99.5 퍼센타일)\ncoef = 30.8301  # 로그 오즈비 계수\nstd_err = 52.135  # 표준 오차\n\nconf_int_low = np.exp(coef - z * std_err)  # 표준 오차를 이용한 계산\nconf_int_high = np.exp(coef + z * std_err)\nprint(conf_int_low, conf_int_high)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.1683218982002717e-45 5.141881884993857e+71\n```\n:::\n:::\n\n\n## 문제 8. 주어진 데이터에 대하여 로지스틱 회귀 모델의 예측 확률을 구한 후, 50% 이상인 경우 1로 처리하여, 혼동 행렬를 구하시오.\n\n::: {#e819e803 .cell execution_count=7}\n``` {.python .cell-code}\ndf['predicted'] = model.predict() >= 0.5\nfrom sklearn.metrics import confusion_matrix\nconf_matrix = confusion_matrix(df['REMISS'], df['predicted'])\nprint(conf_matrix)\n\n# 실제 값과 예측 값\n# True Positive (TP): 실제 값이 1이고 예측 값도 1인 경우\n# True Negative (TN): 실제 값이 0이고 예측 값도 0인 경우\n# False Positive (FP): 실제 값이 0인데 예측 값이 1인 경우\n# False Negative (FN): 실제 값이 1인데 예측 값이 0인 경우\n\nactual = df['REMISS']  # 실제 값 (정답)\npredicted = model.predict() >= 0.5  # 예측값 (확률이 50% 이상일 때 1로 처리)\n\n# 혼동 행렬 초기화\nTP = TN = FP = FN = 0\n\n# 혼동 행렬 계산\nfor a, p in zip(actual, predicted):\n    if a == 1 and p == 1:\n        TP += 1\n    elif a == 0 and p == 0:\n        TN += 1\n    elif a == 0 and p == 1:\n        FP += 1\n    elif a == 1 and p == 0:\n        FN += 1\n\n# 결과 출력\nconf_matrix = np.array([[TN, FP], [FN, TP]]).reshape(2,2)\nprint(\"Confusion Matrix:\")\nprint(conf_matrix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[15  3]\n [ 4  5]]\nConfusion Matrix:\n[[15  3]\n [ 4  5]]\n```\n:::\n:::\n\n\n## 문제 9. 해당 모델의 Accuracy는 얼마인가요?\n\n::: {#44d39c2d .cell execution_count=8}\n``` {.python .cell-code}\nfrom sklearn.metrics import confusion_matrix, accuracy_score, f1_score\naccuracy1 = accuracy_score(df['REMISS'], df['predicted'])\naccuracy2 = (conf_matrix[0, 0] + conf_matrix[1, 1]) / conf_matrix.sum()\nprint(accuracy1)\nprint(accuracy2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.7407407407407407\n0.7407407407407407\n```\n:::\n:::\n\n\n## 문제 10. 해당 모델의 F1 Score를 구하세요.\n\n::: {#f1bc4201 .cell execution_count=9}\n``` {.python .cell-code}\nf1 = f1_score(df['REMISS'], df['predicted'])\nprint(f1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.5882352941176471\n```\n:::\n:::\n\n\n",
    "supporting": [
      "logisitc_files"
    ],
    "filters": [],
    "includes": {}
  }
}