{
  "hash": "0c0c8ee4b3bbce9bc3bc779045bc8f89",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Homework4\nauthor: hg.park\ndate: '2024-07-29'\ncategories:\n  - Homework\n---\n\n# 표본분산 n-1 vs. n\n\n## 표본 분산 계산 시 왜 n-1로 나누는지 알아보도록 하겠습니다. 균일분포 (3,7)에서 20개의 표본을 뽑아서 분산을 2가지 방법으로 추정해보세요.\n\n### n-1로 나눈 것을 s_2, n으로 나눈 것을 k_2로 정의하고, s_2의 분포와 k_2의 분포를 그려주세요! (10000개 사용)\n\n::: {#f56b01ce .cell execution_count=1}\n``` {.python .cell-code}\n# 균일 분포 uniform 라이브러리 호출\nfrom scipy.stats import uniform\n\n# X ~ U(a,b)\n# loc = a, scale = b - a\n# 균일분포 (3,7)에서 20개의 표본을 10000번 뽑음\nx = uniform.rvs(loc=3, scale=4, size=20*10000).reshape(-1,20)\nx\n\n# 1. 분산 s_2 : n - 1로 나눈 분산\nimport numpy as np\ns_2 = x.var(axis=1, ddof=1)\ns_2\n\nimport matplotlib.pyplot as plt\nplt.hist(s_2, color = 'blue', alpha=0.4, label = 'n-1')\nplt.legend()\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](free_of_freedom_files/figure-html/cell-2-output-1.png){width=583 height=414}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n::: {#e343787c .cell execution_count=2}\n``` {.python .cell-code}\n# 균일 분포 uniform 라이브러리 호출\nfrom scipy.stats import uniform\n\n# X ~ U(a,b)\n# loc = a, scale = b - a\n# 균일분포 (3,7)에서 20개의 표본을 10000번 뽑음\nx = uniform.rvs(loc=3, scale=4, size=20*10000).reshape(-1,20)\nx\n\n# 2. 분산 k_2 : n으로 나눈 분산\n# np.var() 사용\nk_2 = x.var(axis=1, ddof=0)\nk_2\n\nimport matplotlib.pyplot as plt\nplt.hist(k_2, color = 'red', alpha=0.4, label = 'n')\nplt.legend()\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](free_of_freedom_files/figure-html/cell-3-output-1.png){width=583 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n### 2. 각 분포 그래프에 모분산의 위치에 녹색 막대를 그려주세요.\n\n::: {#92d9ff1e .cell execution_count=3}\n``` {.python .cell-code}\n# 균일 분포 uniform 라이브러리 호출\nfrom scipy.stats import uniform\n\n# X ~ U(a,b)\n# loc = a, scale = b - a\n# 균일분포 (3,7)에서 20개의 표본을 10000번 뽑음\nx = uniform.rvs(loc=3, scale=4, size=20*10000).reshape(-1,20)\nx\n\n# 1. 분산 s_2 : n - 1로 나눈 분산\nimport numpy as np\ns_2 = x.var(axis=1, ddof=1)\ns_2\n\n# 모분산\nv = np.var(x)\n\nimport matplotlib.pyplot as plt\nplt.hist(s_2, color = 'blue', alpha=0.4, label = 'n-1')\nplt.axvline(x=v, color='green', linestyle='-', linewidth=2)\nplt.legend()\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](free_of_freedom_files/figure-html/cell-4-output-1.png){width=583 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n::: {#2bb62a91 .cell execution_count=4}\n``` {.python .cell-code}\n# 균일 분포 uniform 라이브러리 호출\nfrom scipy.stats import uniform\n\n# X ~ U(a,b)\n# loc = a, scale = b - a\n# 균일분포 (3,7)에서 20개의 표본을 10000번 뽑음\nx = uniform.rvs(loc=3, scale=4, size=20*10000).reshape(-1,20)\nx\n\n# 2. 분산 k_2 : n으로 나눈 분산\n# np.var() 사용\nk_2 = x.var(axis=1, ddof=0)\nk_2\n\n# 모분산\nv = np.var(x)\n\nimport matplotlib.pyplot as plt\nplt.hist(k_2, color = 'red', alpha=0.4, label = 'n')\nplt.axvline(x=v, color='green', linestyle='-', linewidth=2)\nplt.legend()\nplt.show()\nplt.clf()\n```\n\n::: {.cell-output .cell-output-display}\n![](free_of_freedom_files/figure-html/cell-5-output-1.png){width=583 height=411}\n:::\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n:::\n\n\n### 3. 결과를 살펴보고, 왜 n-1로 나눈 것을 분산을 추정하는 지표로 사용하는 것이 타당한지 써주세요!\n\nn-1로 나눈 분산인 s_2의 분포는 모분산과 더 가깝고, 분포의 중앙에 모분산이 위치함. 반면 k_2의 분포는 모분산보다 왼쪽(더 작게)치우쳐 있음\n\nn으로 나눈 분산인 k_2는 표본 분산의 평균이 모분산보다 작아짐. 이를 보정하기 위해 n-1로 나누어줌, n-1로 나눈 분산 s_2은 모분산의 불평 추정량.\n\n",
    "supporting": [
      "free_of_freedom_files"
    ],
    "filters": [],
    "includes": {}
  }
}